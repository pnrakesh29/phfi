package com.chatak.beacon.dao.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.chatak.beacon.constants.Constant;
import com.chatak.beacon.dao.ZoneDao;
import com.chatak.beacon.dao.model.QLocation;
import com.chatak.beacon.dao.model.QZone;
import com.chatak.beacon.dao.model.Zone;
import com.chatak.beacon.dao.repository.ZoneRepository;
import com.chatak.beacon.enums.Status;
import com.chatak.beacon.model.ZoneRequest;
import com.chatak.beacon.model.ZoneResponse;
import com.chatak.beacon.util.StringUtil;
import com.mysema.query.Tuple;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.expr.BooleanExpression;

@Repository("zoneDao")
public class ZoneDaoImpl implements ZoneDao {

	@PersistenceContext
	private EntityManager entityManager;

	
	@Autowired
	private ZoneRepository zoneRepository;
	
	@Override
	public void createOrUpdate(Zone zone) {
		zoneRepository.save(zone);
	}
	@Override
	public List<Zone> findByZoneName(String zoneName) {	
		return zoneRepository.findByZoneName(zoneName);
	}
	@Override
	public ZoneResponse searchZone(ZoneRequest zoneRequest) {
		ZoneResponse zoneResponse =new ZoneResponse();
	    int startIndex = 0;
	    int endIndex = 0;
	    Integer totalRecords = zoneRequest.getNoOfRecords();

	    if(zoneRequest.getPageIndex() == null || zoneRequest.getPageIndex() == 1) {
	      totalRecords = getTotalNumberOfRecords(zoneRequest);
	      zoneRequest.setNoOfRecords(totalRecords);
	    }

	    if(zoneRequest.getPageIndex() == null && zoneRequest.getPageSize() == null) {
	      startIndex = 0;
	      endIndex = Constant.DEFAULT_PAGE_SIZE;
	    }
	    else {
	      startIndex = (zoneRequest.getPageIndex() - 1) * zoneRequest.getPageSize();
	      endIndex = startIndex + zoneRequest.getPageSize();
	    }
	    List<ZoneRequest> zoneList = new ArrayList<ZoneRequest>();
	    QLocation location = QLocation.location;
	    JPAQuery query = new JPAQuery(entityManager);
	    List<Tuple> list = query
		        .from(QZone.zone,location)
		        .where(isIdEq(zoneRequest.getId()),
		        QZone.zone.locationId.eq(location.id),
		        location.status.ne(Status.Deleted.name()))
		        .offset(startIndex).limit(endIndex).orderBy(orderByIdDesc())
		        .list(QZone.zone.id,QZone.zone.locationId,QZone.zone.zoneName,
		            location.locationName,QZone.zone.longitude,QZone.zone.lattitude,QZone.zone.type,QZone.zone.subType,
		            QZone.zone.geofence,QZone.zone.radius,QZone.zone.status,location.locationName);
	  for (Tuple tuple : list) {
	      
		  ZoneRequest zoneRequest2 = new ZoneRequest();
		  zoneRequest2.setId(tuple.get(QZone.zone.id));
		  zoneRequest2.setLocationId(tuple.get(QZone.zone.locationId));
		  zoneRequest2.setZoneName(tuple.get(QZone.zone.zoneName));
		  zoneRequest2.setGeofence(tuple.get(QZone.zone.geofence));
		  zoneRequest2.setLongitude(tuple.get(QZone.zone.longitude));
		  zoneRequest2.setLattitude(tuple.get(QZone.zone.lattitude));
		  zoneRequest2.setRadius(tuple.get(QZone.zone.radius));
		  zoneRequest2.setType(tuple.get(QZone.zone.type));
		  zoneRequest2.setSubType(tuple.get(QZone.zone.subType));
		  zoneRequest2.setStatus(tuple.get(QZone.zone.status));
		  zoneRequest2.setLocationName(tuple.get(location.locationName));
		  zoneList.add(zoneRequest2);
	    }
	  zoneResponse.setZoneRequest(zoneList);
	  return zoneResponse;
	  
	}
	 private int getTotalNumberOfRecords(ZoneRequest zoneRequest) {
    JPAQuery query = new JPAQuery(entityManager);
    List<Long> list = query.from(QZone.zone).where(isIdEq(zoneRequest.getId()),
												              isNameEq(zoneRequest.getZoneName()),
												              isTypeEq(zoneRequest.getType()),
												              isSubTypeEq(zoneRequest.getSubType())).list(QZone.zone.id);
    return (StringUtil.isListNotNullNEmpty(list) ? list.size() : 0);
  }
	private BooleanExpression isIdEq(Long id) {
		    return (id != null && !"".equals(id)) ? QZone.zone.id.eq(id): null;
		  }
	 private BooleanExpression isNameEq(String zoneName) {
		    return (zoneName != null && !"".equals(zoneName)) ? QZone.zone.zoneName.toUpperCase().like("%"+ zoneName.toUpperCase().replace("*","")+ "%"): null;
		  }
	 private BooleanExpression isTypeEq(String type) {
		    return (type != null && !"".equals(type)) ? QZone.zone.type.toUpperCase().like("%"+ type.toUpperCase().replace("*","")+ "%"): null;
		  }
	 private BooleanExpression isSubTypeEq(String subType) {
		    return (subType != null && !"".equals(subType)) ? QZone.zone.subType.toUpperCase().like("%"+ subType.toUpperCase().replace("*","")+ "%"): null;
		  }
	 
	@Override
	public List<Zone> findById(Long id) {
		return zoneRepository.findById(id);
	}
	@Override
	public List<ZoneRequest> getAllActiveLocations() {
		return zoneRepository.findByStatus(Constant.ACTIVE.toString());
	}
	
	@Override
	public ZoneResponse findZoneDetatils(ZoneRequest zoneRequest) {
		ZoneResponse zoneResponse = new ZoneResponse();
		  int startIndex = 0;
		    int endIndex = 0;
		    Integer totalRecords = zoneRequest.getNoOfRecords();

		    if(zoneRequest.getPageIndex() == null || zoneRequest.getPageIndex() == 1) {
		      totalRecords = getTotalNumberOfRecords(zoneRequest);
		      zoneRequest.setNoOfRecords(totalRecords);
		    }

		    if(zoneRequest.getPageIndex() == null && zoneRequest.getPageSize() == null) {
		      startIndex = 0;
		      endIndex = Constant.DEFAULT_PAGE_SIZE;
		    }
		    else {
		      startIndex = (zoneRequest.getPageIndex() - 1) * zoneRequest.getPageSize();
		      endIndex = startIndex + zoneRequest.getPageSize();
		    }
		  List<ZoneRequest> zoneList = new ArrayList<ZoneRequest>();
		  QLocation location = QLocation.location;
		  JPAQuery query = new JPAQuery(entityManager);
		  List<Tuple> list = query
			        .from(QZone.zone,location)
			        .where(isIdEq(zoneRequest.getId()),
			        QZone.zone.locationId.eq(location.id),
			        location.status.ne(Status.Deleted.name()))
			        .offset(startIndex).limit(endIndex).orderBy(orderByIdDesc())
			        .list(QZone.zone.id,QZone.zone.locationId,QZone.zone.zoneName,
			            location.locationName,QZone.zone.longitude,QZone.zone.lattitude,QZone.zone.type,QZone.zone.subType,
			            QZone.zone.geofence,QZone.zone.radius,QZone.zone.status,location.locationName);
		  for (Tuple tuple : list) {
		      
			  ZoneRequest zoneRequest2 = new ZoneRequest();
			  zoneRequest2.setId(tuple.get(QZone.zone.id));
			  zoneRequest2.setLocationId(tuple.get(QZone.zone.locationId));
			  zoneRequest2.setZoneName(tuple.get(QZone.zone.zoneName));
			  zoneRequest2.setGeofence(tuple.get(QZone.zone.geofence));
			  zoneRequest2.setLongitude(tuple.get(QZone.zone.longitude));
			  zoneRequest2.setLattitude(tuple.get(QZone.zone.lattitude));
			  zoneRequest2.setRadius(tuple.get(QZone.zone.radius));
			  zoneRequest2.setType(tuple.get(QZone.zone.type));
			  zoneRequest2.setSubType(tuple.get(QZone.zone.subType));
			  zoneRequest2.setStatus(tuple.get(QZone.zone.status));
			  zoneRequest2.setLocationName(tuple.get(location.locationName));
			  zoneList.add(zoneRequest2);
		    }
		  zoneResponse.setZoneRequest(zoneList);
		  
		  
		  
		return zoneResponse;
	}

	private OrderSpecifier<?> orderByIdDesc() {
		
		return  QZone.zone.createdDate.desc();
	}
	

}
