package com.chatak.beacon.dao.impl;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.chatak.beacon.constants.Constant;
import com.chatak.beacon.dao.ZoneDao;
import com.chatak.beacon.dao.model.QZone;
import com.chatak.beacon.dao.model.Zone;
import com.chatak.beacon.dao.repository.ZoneRepository;
import com.chatak.beacon.model.ZoneRequest;
import com.chatak.beacon.util.StringUtil;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.expr.BooleanExpression;

@Repository("zoneDao")
public class ZoneDaoImpl implements ZoneDao {

	@PersistenceContext
	private EntityManager entityManager;

	
	@Autowired
	private ZoneRepository zoneRepository;
	
	@Override
	public void createOrUpdate(Zone zone) {
		zoneRepository.save(zone);
	}
	@Override
	public List<Zone> findByZoneName(String zoneName) {	
		return zoneRepository.findByZoneName(zoneName);
	}
	@Override
	public List<Zone> searchZone(ZoneRequest zoneRequest) {

	    int startIndex = 0;
	    int endIndex = 0;
	    Integer totalRecords = zoneRequest.getNoOfRecords();

	    if(zoneRequest.getPageIndex() == null || zoneRequest.getPageIndex() == 1) {
	      totalRecords = getTotalNumberOfRecords(zoneRequest);
	      zoneRequest.setNoOfRecords(totalRecords);
	    }

	    if(zoneRequest.getPageIndex() == null && zoneRequest.getPageSize() == null) {
	      startIndex = 0;
	      endIndex = Constant.DEFAULT_PAGE_SIZE;
	    }
	    else {
	      startIndex = (zoneRequest.getPageIndex() - 1) * zoneRequest.getPageSize();
	      endIndex = startIndex + zoneRequest.getPageSize();
	    }
	    JPAQuery query = new JPAQuery(entityManager);
	    List<Zone> zones = query.from(QZone.zone).where(isLocationIdEq(zoneRequest.getLocationId()),
                                                        isNameEq(zoneRequest.getZoneName()),
                                                        isTypeEq(zoneRequest.getType()),
                                                        isSubTypeEq(zoneRequest.getSubType())).offset(startIndex).limit(endIndex).orderBy(QZone.zone.id.desc()).list(QZone.zone);
	    return zones;
	  
	}
	 private int getTotalNumberOfRecords(ZoneRequest zoneRequest) {
    JPAQuery query = new JPAQuery(entityManager);
    List<Long> list = query.from(QZone.zone).where(isLocationIdEq(zoneRequest.getLocationId()),
												              isNameEq(zoneRequest.getZoneName()),
												              isTypeEq(zoneRequest.getType()),
												              isSubTypeEq(zoneRequest.getSubType())).list(QZone.zone.id);
    return (StringUtil.isListNotNullNEmpty(list) ? list.size() : 0);
  }
	private BooleanExpression isLocationIdEq(Long locationId) {
		    return (locationId != null && !"".equals(locationId)) ? QZone.zone.locationId.eq(locationId): null;
		  }
	 private BooleanExpression isNameEq(String zoneName) {
		    return (zoneName != null && !"".equals(zoneName)) ? QZone.zone.zoneName.toUpperCase().like("%"+ zoneName.toUpperCase().replace("*","")+ "%"): null;
		  }
	 private BooleanExpression isTypeEq(String type) {
		    return (type != null && !"".equals(type)) ? QZone.zone.type.toUpperCase().like("%"+ type.toUpperCase().replace("*","")+ "%"): null;
		  }
	 private BooleanExpression isSubTypeEq(String subType) {
		    return (subType != null && !"".equals(subType)) ? QZone.zone.subType.toUpperCase().like("%"+ subType.toUpperCase().replace("*","")+ "%"): null;
		  }
	@Override
	public List<Zone> findById(Long id) {
		return zoneRepository.findById(id);
	}
	

}
